---
#
# Runs NodeVertical test
#

- name: Runs NodeVertical on a RHCOS cluster
  hosts: orchestration
  gather_facts: true
  remote_user: "{{orchestration_user}}"
  vars_files:
    - vars/nodevertical.yml
  vars:
    workload_job: "nodevertical"
  tasks:
    - name: Create scale-ci-tooling directory
      file:
        path: "{{ansible_user_dir}}/scale-ci-tooling"
        state: directory

    - name: Copy workload files
      copy:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
      with_items:
        - src: scale-ci-tooling-ns.yml
          dest: "{{ansible_user_dir}}/scale-ci-tooling/scale-ci-tooling-ns.yml"

    - name: Slurp kubeconfig file
      slurp:
        src: "{{kubeconfig_file}}"
      register: kubeconfig_file_slurp

    - name: Slurp ssh private key file
      slurp:
        src: "{{pbench_ssh_private_key_file}}"
      register: pbench_ssh_private_key_file_slurp

    - name: Slurp ssh public key file
      slurp:
        src: "{{pbench_ssh_public_key_file}}"
      register: pbench_ssh_public_key_file_slurp

    - name: Remove nodevertical label from nodes
      shell: |
        oc label nodes -l nodevertical=true nodevertical-

    - name: nodevertical node labeling with pbench agents
      when: enable_pbench_agents|bool
      block:
        - name: Label worker nodes with pbench agent for nodevertical (NODEVERTICAL_NODE_COUNT < 2)
          shell: |
            oc get nodes -l pbench_agent=true,node-role.kubernetes.io/worker= --no-headers | head -n {{nodevertical_node_count}} | awk '{print $1}' | xargs -I % oc label nodes % nodevertical=true
          when: nodevertical_node_count|int <= 2

        - name: Label worker nodes with pbench agent for nodevertical (NODEVERTICAL_NODE_COUNT > 2)
          shell: |
            oc get nodes -l pbench_agent=true,node-role.kubernetes.io/worker= --no-headers | head -n 2 | awk '{print $1}' | xargs -I % oc label nodes % nodevertical=true
          when: nodevertical_node_count|int > 2

        - name: Label worker nodes without pbench agent for nodevertical (NODEVERTICAL_NODE_COUNT > 2)
          shell: |
            oc get nodes -l node-role.kubernetes.io/worker= --show-labels --no-headers | grep -v "pbench_agent=true" | head -n {{nodevertical_node_count|int -2}} | awk '{print $1}' | xargs -I % oc label nodes % nodevertical=true
          when: nodevertical_node_count|int > 2

    - name: Label worker nodes when there are no pbench agents
      shell: |
        oc get nodes -l node-role.kubernetes.io/worker= --no-headers | head -n {{nodevertical_node_count}} | awk '{print $1}' | xargs -I % oc label nodes % nodevertical=true
      when: not enable_pbench_agents|bool

    - name: Calculate maximum pods to fit in nodevertical labeled space
      shell: |
        for node in $(oc get nodes -l="nodevertical=true" | awk 'NR > 1 {print $1}'); do
          pods_running=$(oc describe node $node | grep -w "Non-terminated \Pods:" | awk '{print $3}' | sed "s/(//g")
          pod_count=$(( pod_count+pods_running ))
        done
        echo "$(( {{nodevertical_maxpods}}-pod_count ))"
      register: total_pod_count

    - name: Block to set clustername
      block:
        - name: Get cluster name
          shell: |
            {%raw%}oc get machineset -n openshift-machine-api -o=go-template='{{index (index .items 0).metadata.labels "machine.openshift.io/cluster-api-cluster"}}'{%endraw%}
          register: cluster_name

        - name: Create tooling service account
          set_fact:
            snafu_cluster_name: cluster_name.stdout
          when: cluster_name is succeeded
      when: snafu_cluster_name == ""

    - name: Template workload templates
      template:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
        lstrip_blocks: yes
      with_items:
        - src: pbench-cm.yml.j2
          dest: "{{ansible_user_dir}}/scale-ci-tooling/pbench-cm.yml"
        - src: pbench-ssh-secret.yml.j2
          dest: "{{ansible_user_dir}}/scale-ci-tooling/pbench-ssh-secret.yml"
        - src: kubeconfig-secret.yml.j2
          dest: "{{ansible_user_dir}}/scale-ci-tooling/kubeconfig-secret.yml"
        - src: workload-job.yml.j2
          dest: "{{ansible_user_dir}}/scale-ci-tooling/workload-job.yml"
        - src: workload-env.yml.j2
          dest: "{{ansible_user_dir}}/scale-ci-tooling/workload-nodevertical-env.yml"
        - src: workload-nodevertical-script-cm.yml.j2
          dest: "{{ansible_user_dir}}/scale-ci-tooling/workload-nodevertical-script-cm.yml"


    - name: Check if scale-ci-tooling namespace exists
      shell: |
        oc get project scale-ci-tooling
      ignore_errors: true
      changed_when: false
      register: scale_ci_tooling_ns_exists

    - name: Ensure any stale scale-ci-nodevertical job is deleted
      shell: |
        oc delete job scale-ci-nodevertical -n scale-ci-tooling
      register: scale_ci_tooling_project
      failed_when: scale_ci_tooling_project.rc == 0
      until: scale_ci_tooling_project.rc == 1
      retries: 60
      delay: 1
      when: scale_ci_tooling_ns_exists.rc == 0

    - name: Block for non-existing tooling namespace
      block:
        - name: Create tooling namespace
          shell: |
            oc create -f {{ansible_user_dir}}/scale-ci-tooling/scale-ci-tooling-ns.yml

        - name: Create tooling service account
          shell: |
            oc create serviceaccount useroot -n scale-ci-tooling
            oc adm policy add-scc-to-user privileged -z useroot -n scale-ci-tooling
          when: enable_pbench_agents|bool
      when: scale_ci_tooling_ns_exists.rc != 0

    - name: Create/replace kubeconfig secret
      shell: |
        oc replace --force -n scale-ci-tooling -f "{{ansible_user_dir}}/scale-ci-tooling/kubeconfig-secret.yml"

    - name: Create/replace the pbench configmap
      shell: |
        oc replace --force -n scale-ci-tooling -f "{{ansible_user_dir}}/scale-ci-tooling/pbench-cm.yml"

    - name: Create/replace pbench ssh secret
      shell: |
        oc replace --force -n scale-ci-tooling -f "{{ansible_user_dir}}/scale-ci-tooling/pbench-ssh-secret.yml"

    - name: Create/replace workload script configmap
      shell: |
        oc replace --force -n scale-ci-tooling -f "{{ansible_user_dir}}/scale-ci-tooling/workload-nodevertical-script-cm.yml"

    - name: Create/replace workload script environment configmap
      shell: |
        oc replace --force -n scale-ci-tooling -f "{{ansible_user_dir}}/scale-ci-tooling/workload-nodevertical-env.yml"

    - name: Enable azure authentication when running ocp on azure
      include_role:
        name: azure-auth
      when: azure_auth and azure_auth_file != ""

    - name: Create/replace workload job to that runs workload script
      shell: |
        oc replace --force -n scale-ci-tooling -f "{{ansible_user_dir}}/scale-ci-tooling/workload-job.yml"

    - name: Poll until job pod is running
      shell: |
        oc get pods --selector=job-name=scale-ci-nodevertical -n scale-ci-tooling -o json
      register: pod_json
      retries: 60
      delay: 2
      until: pod_json.stdout | from_json | json_query('items[0].status.phase==`Running`')

    - name: Poll until job is complete
      shell: |
        oc get job scale-ci-nodevertical -n scale-ci-tooling -o json
      register: job_json
      retries: "{{job_completion_poll_attempts}}"
      delay: 10
      until: job_json.stdout | from_json | json_query('status.succeeded==`1` || status.failed==`1`')
      failed_when: job_json.stdout | from_json | json_query('status.succeeded==`1`') == false
      when: job_completion_poll_attempts|int > 0
