apiVersion: v1
kind: ConfigMap
metadata:
  name: scale-ci-workload-script
data:
  run.sh: |
    #!/bin/sh
    set -eo pipefail
    workload_log() { echo "$(date -u) $@" >&2; }
    export -f workload_log

    workload_log "Preparing OpenShift objects for workload"
    sh /root/workload/create-oc-objects.sh $STORAGE_PROJECT_NAME $STORAGE_PROJECT_NUMBER $DELETE_TEST_PROJECT_BEFORE_TEST $VOLUME_CAPACITY $STORAGE_CLASS_NAME

    workload_log "Configuring pbench for Storage Git test"
    mkdir -p /var/lib/pbench-agent/tools-default/
    echo "${USER_NAME:-default}:x:$(id -u):0:${USER_NAME:-default} user:${HOME}:/sbin/nologin" >> /etc/passwd
    if [ "${ENABLE_PBENCH_AGENTS}" = true ]; then
      echo "" > /var/lib/pbench-agent/tools-default/disk
      echo "" > /var/lib/pbench-agent/tools-default/iostat
      echo "workload" > /var/lib/pbench-agent/tools-default/label
      echo "" > /var/lib/pbench-agent/tools-default/mpstat
      echo "" > /var/lib/pbench-agent/tools-default/oc
      echo "" > /var/lib/pbench-agent/tools-default/perf
      echo "" > /var/lib/pbench-agent/tools-default/pidstat
      echo "" > /var/lib/pbench-agent/tools-default/sar
      master_nodes=`oc get nodes -l pbench_agent=true,node-role.kubernetes.io/master= --no-headers | awk '{print $1}'`
      for node in $master_nodes; do
        echo "master" > /var/lib/pbench-agent/tools-default/remote@$node
      done
      infra_nodes=`oc get nodes -l pbench_agent=true,node-role.kubernetes.io/infra= --no-headers | awk '{print $1}'`
      for node in $infra_nodes; do
        echo "infra" > /var/lib/pbench-agent/tools-default/remote@$node
      done
      worker_nodes=`oc get nodes -l pbench_agent=true,node-role.kubernetes.io/worker= --no-headers | awk '{print $1}'`
      for node in $worker_nodes; do
        echo "worker" > /var/lib/pbench-agent/tools-default/remote@$node
      done
    fi
    source /opt/pbench-agent/profile
    workload_log "Done configuring pbench for Conformance"

    workload_log "Running Storage Git workload"
    if [ "${PBENCH_INSTRUMENTATION}" = "true" ]; then
      pbench-user-benchmark -- /root/workload/test-git-m.sh $STORAGE_PROJECT_NAME $STORAGE_PROJECT_NUMBER $ITERATION
      result_dir="/var/lib/pbench-agent/$(ls -t /var/lib/pbench-agent/ | grep "pbench-user" | head -1)"/1/sample1
      if [ "${ENABLE_PBENCH_COPY}" = "true" ]; then
        pbench-copy-results --prefix ${CONFORMANCE_TEST_PREFIX}
      fi
    else
      sh /root/workload/test-git-m.sh $STORAGE_PROJECT_NAME $STORAGE_PROJECT_NUMBER $ITERATION
      result_dir=/tmp
    fi
    workload_log "Completed Storage Git workload"
  create-oc-objects.sh: |
    #!/bin/bash

    readonly NAMESPACE_BASENAME=${1}
    readonly ITERATION=${2}
    readonly DELETE_EXISTING_PROJECTS=$(echo "$3" | awk '{print tolower($0)}')

    echo "NAMESPACE_BASENAME: ${NAMESPACE_BASENAME}"
    echo "ITERATION: ${ITERATION}"
    echo "DELETE_EXISTING_PROJECTS: ${DELETE_EXISTING_PROJECTS}"

    readonly VOLUME_CAPACITY=$4
    readonly STORAGE_CLASS_NAME=$5

    function wait_until_the_project_is_gone {
      local project
      project=$1
      local timeout
      timeout=$2
      local interval
      interval=$3

      local start_time
      start_time=$(date +%s)

      local code
      while (( ($(date +%s) - ${start_time}) < ${timeout} ));
      do
        oc get project ${project} 2>&1 | grep "not found"
        code=$?
        if [[ ${code} -ne 0 ]]; then
          echo "the project is still there"
          sleep ${interval}
        else
          echo "the project is gone"
          MY_TIME=$(($(date +%s) - ${start_time}))
          break
        fi
      done
    }

    function wait_until_the_pod_is_ready {
      local project
      project=$1
      local pod
      pod=$2
      local timeout
      timeout=$3
      local interval
      interval=$4

      local start_time
      start_time=$(date +%s)

      local ready_pods
      while (( ($(date +%s) - ${start_time}) < ${timeout} ));
      do
        ready_pods=$(oc get pod -n ${project} | grep ${pod} | grep -v deploy | grep Running | grep 1/1 | wc -l)
        if [[ "${ready_pods}" == "1" ]]; then
          MY_TIME=$(($(date +%s) - ${start_time}))
          break
        fi
        echo "pod ${pod} is not ready yet ... waiting"
        sleep ${interval}
      done
    }

    for i in $(seq 1 ${ITERATION});
    do
      echo "delete ${i}..."
      NAMESPACE="${NAMESPACE_BASENAME}-${i}"
      if [[ "${DELETE_EXISTING_PROJECTS}" == "true" ]];
      then
        oc delete project ${NAMESPACE} --wait=false
      fi
      sleep 10
    done

    for i in $(seq 1 ${ITERATION});
    do
      echo "create ${i}..."
      NAMESPACE="${NAMESPACE_BASENAME}-${i}"
      if [[ "${DELETE_EXISTING_PROJECTS}" == "true" ]];
      then
        MY_TIME=-1
        wait_until_the_project_is_gone ${NAMESPACE} 180 10
        if (( ${MY_TIME} == -1 )); then
          echo "project ${NAMESPACE} is still there, time is up"
          exit 1
        else
          echo "it took ${MY_TIME} seconds to delete the project ${NAMESPACE}"
        fi
      fi
      oc new-project ${NAMESPACE} --skip-config-write=true
      oc label namespace ${NAMESPACE} purpose=test
      oc process -f "/root/workload/template_git.yaml" \
          -p PVC_SIZE=${VOLUME_CAPACITY} \
          -p STORAGE_CLASS_NAME=${STORAGE_CLASS_NAME} \
          | oc create --namespace=${NAMESPACE} -f -
      sleep 10
    done


    for i in $(seq 1 ${ITERATION});
    do
      echo "wait ${i}..."
      NAMESPACE="${NAMESPACE_BASENAME}-${i}"
      MY_TIME=-1
      wait_until_the_pod_is_ready ${NAMESPACE} git 180 10
      if (( ${MY_TIME} == -1 )); then
        echo "git pod is not ready, time is up"
        exit 1
      else
        echo "it took ${MY_TIME} seconds to get git pod ready"
      fi
    done
  template_git.yaml: |
    apiVersion: v1
    kind: Template
    metadata:
      creationTimestamp: null
      name: pvc_template
    objects:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: ${PVC_NAME}
      spec:
        accessModes:
        - ${PVC_MODE}
        resources:
          requests:
            storage: ${PVC_SIZE}
        storageClassName: ${STORAGE_CLASS_NAME}
    - kind: "DeploymentConfig"
      apiVersion: "v1"
      metadata:
        name: "git"
      spec:
        template:
          metadata:
            labels:
              name: "git"
          spec:
            containers:
              - name: "git"
                image: "docker.io/hongkailiu/git:2.17.1"
                volumeMounts:
                  - name: "pvol"
                    mountPath: "/data"
            volumes:
              - name: "pvol"
                persistentVolumeClaim:
                  claimName: "${PVC_NAME}"
        triggers:
          - type: "ConfigChange"
        replicas: 1
    parameters:
    - description: PVC Name
      displayName: PVC Name
      name: PVC_NAME
      required: true
      value: "git-pvc"
    - description: PVC Mode
      displayName: PVC Mode
      name: PVC_MODE
      value: ReadWriteOnce
    - description: PVC size
      displayName: PVC size
      name: PVC_SIZE
      value: 3Gi
    - description: Storage Class Name
      displayName: Storage Class Name
      name: STORAGE_CLASS_NAME
      required: true
      value: gp2
  test-git-m.sh: |
    #!/bin/bash

    set -e

    readonly NAMESPACE_BASENAME=${1}
    readonly NAMESPACE_NUMBER=${2}
    readonly ITERATION=${3}

    echo "NAMESPACE_BASENAME: ${NAMESPACE_BASENAME}"
    echo "NAMESPACE_NUMBER: ${NAMESPACE_NUMBER}"
    echo "ITERATION: ${ITERATION}"

    for i in $(seq 1 ${NAMESPACE_NUMBER});
    do
      NAMESPACE="${NAMESPACE_BASENAME}-${i}"
      echo "NAMESPACE is ${NAMESPACE}"
      bash root/workload/test-git.sh "${NAMESPACE}" "${ITERATION}" &
    done

    wait
  test-git.sh: |
    #!/bin/bash

    set -e

    readonly NAMESPACE=${1}
    readonly ITERATION=${2}

    readonly GIT_URL=https://github.com/eclipse/che.git
    readonly WORK_GIT_DIR=/data/repo

    echo "NAMESPACE: ${NAMESPACE}"
    echo "ITERATION: ${ITERATION}"

    readonly GIT_POD=$(oc get pod -n ${NAMESPACE} | grep -v deploy | grep git | awk '{print $1}')

    for i_index in $(seq 1 ${ITERATION});
    do
      ### git clone
      echo "${NAMESPACE} iteration: ${i_index}"
      MY_TIME=-1
      start_time=$(date +%s)
      oc exec -n ${NAMESPACE} "${GIT_POD}" -- rm -rf "${WORK_GIT_DIR}"
      oc exec -n ${NAMESPACE} "${GIT_POD}" -- mkdir -p "${WORK_GIT_DIR}"
      clone_start_time=$(date +%s)
      oc exec -n ${NAMESPACE} "${GIT_POD}" -- git -C "${WORK_GIT_DIR}" clone "${GIT_URL}"
      clone_time=$(($(date +%s) - ${clone_start_time}))
      echo "${NAMESPACE} iteration: ${i_index}: git-clone is done in ${clone_time} secs"
      echo "git status ..."
      oc exec -n ${NAMESPACE} "${GIT_POD}" -- git -C "${WORK_GIT_DIR}/che" status
      ### tar & untar
      oc exec -n ${NAMESPACE} "${GIT_POD}" -- rm -rf "${WORK_GIT_DIR}/untar"
      oc exec -n ${NAMESPACE} "${GIT_POD}" -- mkdir -p "${WORK_GIT_DIR}/untar"
      tar_start_time=$(date +%s)
      oc exec -n ${NAMESPACE} "${GIT_POD}" -- tar -zcf "${WORK_GIT_DIR}/che.tar.gz" "${WORK_GIT_DIR}/che"
      tar_time=$(($(date +%s) - ${tar_start_time}))
      echo "${NAMESPACE} iteration: ${i_index}: tar is done in ${tar_time} secs"
      echo "ls che.tar.gz ..."
      oc exec -n ${NAMESPACE} "${GIT_POD}" -- ls -al "${WORK_GIT_DIR}/che.tar.gz"
      un_tar_start_time=$(date +%s)
      oc exec -n ${NAMESPACE} "${GIT_POD}" -- tar -zxf "${WORK_GIT_DIR}/che.tar.gz" -C "${WORK_GIT_DIR}/untar"
      un_tar_time=$(($(date +%s) - ${un_tar_start_time}))
      echo "${NAMESPACE} iteration: ${i_index}: un_t(ar) is done in ${un_tar_time} secs"
      echo "du untar folder ..."
      oc exec -n ${NAMESPACE} "${GIT_POD}" -- du -sh "${WORK_GIT_DIR}/untar"
      rm_start_time=$(date +%s)
      oc exec -n ${NAMESPACE} "${GIT_POD}" -- rm -rf "${WORK_GIT_DIR}/untar"
      rm_time=$(($(date +%s) - ${rm_start_time}))
      echo "${NAMESPACE} iteration: ${i_index}: rm is done in ${rm_time} secs"
      MY_TIME=$(($(date +%s) - ${start_time}))
      echo "${NAMESPACE} iteration: ${i_index}: finished in ${MY_TIME} secs"
    done