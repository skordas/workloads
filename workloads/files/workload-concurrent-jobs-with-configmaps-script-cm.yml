apiVersion: v1
kind: ConfigMap
metadata:
  name: scale-ci-workload-script
data:
  run.sh: |
    #!/bin/sh
    set -eo pipefail
    workload_log() { echo "$(date -u) $@" >&2; }
    export -f workload_log
    workload_log "Configuring pbench for Concurrent Jobs with ConfigMaps workload"
    mkdir -p /var/lib/pbench-agent/tools-default/
    echo "${USER_NAME:-default}:x:$(id -u):0:${USER_NAME:-default} user:${HOME}:/sbin/nologin" >> /etc/passwd
    if [ "${ENABLE_PBENCH_AGENTS}" = true ]; then
      echo "" > /var/lib/pbench-agent/tools-default/disk
      echo "" > /var/lib/pbench-agent/tools-default/iostat
      echo "workload" > /var/lib/pbench-agent/tools-default/label
      echo "" > /var/lib/pbench-agent/tools-default/mpstat
      echo "" > /var/lib/pbench-agent/tools-default/oc
      echo "" > /var/lib/pbench-agent/tools-default/perf
      echo "" > /var/lib/pbench-agent/tools-default/pidstat
      echo "" > /var/lib/pbench-agent/tools-default/sar
      master_nodes=`oc get nodes -l pbench_agent=true,node-role.kubernetes.io/master= --no-headers | awk '{print $1}'`
      for node in $master_nodes; do
        echo "master" > /var/lib/pbench-agent/tools-default/remote@$node
      done
      infra_nodes=`oc get nodes -l pbench_agent=true,node-role.kubernetes.io/infra= --no-headers | awk '{print $1}'`
      for node in $infra_nodes; do
        echo "infra" > /var/lib/pbench-agent/tools-default/remote@$node
      done
      worker_nodes=`oc get nodes -l pbench_agent=true,node-role.kubernetes.io/worker= --no-headers | awk '{print $1}'`
      for node in $worker_nodes; do
        echo "worker" > /var/lib/pbench-agent/tools-default/remote@$node
      done
    fi
    source /opt/pbench-agent/profile
    workload_log "Done configuring pbench for Concurrent Jobs with ConfigMaps workload"

    workload_log "Running Concurrent Jobs with ConfigMaps workload"
    if [ "${PBENCH_INSTRUMENTATION}" = "true" ]; then
      pbench-user-benchmark -- sh /root/workload/workload.sh
      result_dir="/var/lib/pbench-agent/$(ls -t /var/lib/pbench-agent/ | grep "pbench-user" | head -1)"/1/sample1
      if [ "${ENABLE_PBENCH_COPY}" = "true" ]; then
        pbench-copy-results --prefix ${CONFORMANCE_TEST_PREFIX}
      fi
    else
      sh /root/workload/workload.sh
      result_dir=/tmp
    fi
    workload_log "Completed Conformance run"
  workload.sh: |
    #!/bin/bash
    jobs_amount=${NUMBER_OF_CONCURRENT_JOBS}
    function create_jobs()
    {
    for i in $(seq 1 $jobs_amount);
    do
        cat /root/workload/conc_jobs.yaml | sed "s/%JOB_ID%/$i/g" | oc create -f -
    done
    }
    function wait_for_completion()
    {
      running=`oc get pods | grep -c Completed`
      while [ $running -lt $jobs_amount ]; do
        sleep 1
        running=`oc get pods -n concurrent-jobs-workload | grep -E "Completed|OOMKilled" | wc -l`
        echo "$running jobs are completed"
      done
    }

    oc new-project concurrent-jobs-workload
    start_time=`date +%s`
    create_jobs
    wait_for_completion
    end_time=`date +%s`
    total_time=`echo $end_time - $start_time | bc`
    echo "OOMKILLED jobs:"
    oc get pods | grep OOMKilled
    echo "Time taken for creating $jobs_amount concurrent jobs with configmaps $total_time seconds"
  conc_jobs.yaml: |
    # Example from: https://github.com/kubernetes/kubernetes/issues/74412#issue-413387234
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: job-%JOB_ID%
      namespace: concurrent-jobs-workload
    data:
      game.properties: |
        enemies=aliens
    ---
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: job-%JOB_ID%
      namespace: concurrent-jobs-workload
    spec:
      template:
        spec:
          containers:
          - name: busybox
            image: busybox
            resources:
              requests:
                memory: "50Mi"
                cpu: "10m"
            command: [ "/bin/echo" ]
            args: [ "Hello, World!" ]
            volumeMounts:
            - name: config-volume
              mountPath: /etc/config
          volumes:
            - name: config-volume
              configMap:
                name: job-%JOB_ID%
          restartPolicy: Never
      backoffLimit: 4
